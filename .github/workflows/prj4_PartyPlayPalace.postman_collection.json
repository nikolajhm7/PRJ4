{
	"info": {
		"_postman_id": "32fbee38-5ef4-4341-9ee4-423dd14a99e1",
		"name": "prj4_PartyPlayPalace",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34736257",
		"_collection_link": "https://interstellar-shadow-79141.postman.co/workspace/prj4_PartyPlayPalace-Workspace~e1562120-0486-41fc-88ab-c098cab6524e/collection/34736257-32fbee38-5ef4-4341-9ee4-423dd14a99e1?action=share&source=collection_link&creator=34736257"
	},
	"item": [
		{
			"name": "Friendship",
			"item": [
				{
					"name": "SendRequest",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userId\", \"bente\");\r",
									"pm.environment.set(\"friendId\", \"carla\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/Friendship/SendRequest?UserId=Bente&FriendId=Carla",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"Friendship",
								"SendRequest"
							],
							"query": [
								{
									"key": "UserId",
									"value": "Bente"
								},
								{
									"key": "FriendId",
									"value": "Carla"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AcceptRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/Friendship/AcceptRequest?UserId=Carla&FriendId=Bente",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"Friendship",
								"AcceptRequest"
							],
							"query": [
								{
									"key": "UserId",
									"value": "Carla"
								},
								{
									"key": "FriendId",
									"value": "Bente"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteFriendship",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"const DeleteBente = {\r",
									"    url: pm.collectionVariables.get('base_url') + \"/DeleteUser\",\r",
									"    method: 'DELETE',\r",
									"    header: 'Content-Type: application/json',\r",
									"    body: {\r",
									"        mode: 'application/json',\r",
									"        raw: JSON.stringify(\"Bente\")\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(DeleteBente, function (err) {\r",
									"    if (err) {\r",
									"        console.log(err);\r",
									"    } });\r",
									"\r",
									"const DeleteCarla = {\r",
									"    url: pm.collectionVariables.get('base_url') + \"/DeleteUser\",\r",
									"    method: 'DELETE',\r",
									"    header: 'Content-Type: application/json',\r",
									"    body: {\r",
									"        mode: 'application/json',\r",
									"        raw: JSON.stringify(\"Carla\")\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(DeleteCarla, function (err) {\r",
									"    if (err) {\r",
									"        console.log(err);\r",
									"    } });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"Bente\",\r\n  \"friendName\": \"Carla\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/Friendship/DeleteFriendship",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"Friendship",
								"DeleteFriendship"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"const makeBenteRequest = {\r",
							"    url: pm.collectionVariables.get('base_url') + \"/makeNewUser\",\r",
							"    method: 'POST',\r",
							"    header: 'Content-Type: application/json',\r",
							"    body: {\r",
							"        mode: 'application/json',\r",
							"        raw: JSON.stringify({\r",
							"  \"userName\": \"Bente\",\r",
							"  \"email\": \"bente@gmail.com\",\r",
							"  \"password\": \"BenteBente1!\"\r",
							"})\r",
							"    }\r",
							"};\r",
							"pm.sendRequest(makeBenteRequest, function (err) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } });\r",
							"\r",
							"const makeCarlaRequest = {\r",
							"    url: pm.collectionVariables.get('base_url') + \"/makeNewUser\",\r",
							"    method: 'POST',\r",
							"    header: 'Content-Type: application/json',\r",
							"    body: {\r",
							"        mode: 'application/json',\r",
							"        raw: JSON.stringify({\r",
							"  \"userName\": \"Carla\",\r",
							"  \"email\": \"carla@gmail.com\",\r",
							"  \"password\": \"CarlaCarla1!\"\r",
							"})\r",
							"    }\r",
							"};\r",
							"pm.sendRequest(makeCarlaRequest, function (err) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } });\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Game",
			"item": [
				{
					"name": "GetAllGames",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/Game/getAllGames",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"Game",
								"getAllGames"
							]
						}
					},
					"response": []
				},
				{
					"name": "getGamesForUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Array should not be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/Game/getGamesForUser/Frank",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"Game",
								"getGamesForUser",
								"Frank"
							]
						}
					},
					"response": []
				},
				{
					"name": "addGameForUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\":\"Bente\",\r\n  \"gameId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/Game/addGameForUser",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"Game",
								"addGameForUser"
							]
						}
					},
					"response": []
				},
				{
					"name": "addGame",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"TheBest\",\r\n  \"maxPlayers\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/Game/addGame",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"Game",
								"addGame"
							]
						}
					},
					"response": []
				},
				{
					"name": "editGame",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"\r",
									"const EditBack = {\r",
									"    url: pm.collectionVariables.get('base_url') + \"/Game/editGame/1\",\r",
									"    method: 'PUT',\r",
									"    header: 'Content-Type: application/json',\r",
									"    body: {\r",
									"        mode: 'application/json',\r",
									"        raw: JSON.stringify({\r",
									"  \"name\": \"hangman\",\r",
									"  \"maxPlayers\": 10\r",
									"})\r",
									"    }};\r",
									"\r",
									"pm.sendRequest(EditBack, function (err) {\r",
									"    if (err) {\r",
									"        console.log(err);\r",
									"    } });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\": \"Updated Game Name\",\r\n    \"MaxPlayers\": 8\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/Game/editGame/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"Game",
								"editGame",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteGame",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"TheBest\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/Game/DeleteGame",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"Game",
								"DeleteGame"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteGameForUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"\r",
									"const DeleteBente = {\r",
									"    url: pm.collectionVariables.get('base_url') + \"/DeleteUser\",\r",
									"    method: 'DELETE',\r",
									"    header: 'Content-Type: application/json',\r",
									"    body: {\r",
									"        mode: 'application/json',\r",
									"        raw: JSON.stringify(\"Bente\")\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(DeleteBente, function (err) {\r",
									"    if (err) {\r",
									"        console.log(err);\r",
									"    } });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"Bente\",\r\n  \"gameId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/Game/DeleteGameForUser",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"Game",
								"DeleteGameForUser"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"const loginRequest = {\r",
							"    url: pm.collectionVariables.get('base_url') + \"/login\",\r",
							"    method: 'POST',\r",
							"    header: 'Content-Type: application/json',\r",
							"    body: {\r",
							"        mode: 'application/json',\r",
							"        raw: JSON.stringify({\r",
							"            \"userName\": \"Frank\",\r",
							"            \"password\": \"FrankFrank1!\"\r",
							"        })\r",
							"    }\r",
							"};\r",
							"pm.sendRequest(loginRequest, function (err, response) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } else {\r",
							"        const token = response.json().token;\r",
							"        pm.environment.set(\"token\", `${token}`);\r",
							"    }\r",
							"});\r",
							"\r",
							"const makeBenteRequest = {\r",
							"    url: pm.collectionVariables.get('base_url') + \"/makeNewUser\",\r",
							"    method: 'POST',\r",
							"    header: 'Content-Type: application/json',\r",
							"    body: {\r",
							"        mode: 'application/json',\r",
							"        raw: JSON.stringify({\r",
							"  \"userName\": \"Bente\",\r",
							"  \"email\": \"bente@gmail.com\",\r",
							"  \"password\": \"BenteBente1!\"\r",
							"})\r",
							"    }\r",
							"};\r",
							"pm.sendRequest(makeBenteRequest, function (err) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } });\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"Frank\",\r\n  \"password\": \"FrankFrank1!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login-as-guest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"guestName\": \"guestName\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login-as-guest",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login-as-guest"
							]
						}
					},
					"response": []
				},
				{
					"name": "checkLoginToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/checkLoginToken",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"checkLoginToken"
							]
						}
					},
					"response": []
				},
				{
					"name": "checkGuestToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{guesttoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/checkGuestToken",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"checkGuestToken"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"const loginRequest = {\r",
							"    url: pm.collectionVariables.get('base_url') + \"/login\",\r",
							"    method: 'POST',\r",
							"    header: 'Content-Type: application/json',\r",
							"    body: {\r",
							"        mode: 'application/json',\r",
							"        raw: JSON.stringify({\r",
							"            \"userName\": \"Frank\",\r",
							"            \"password\": \"FrankFrank1!\"\r",
							"        })\r",
							"    }\r",
							"};\r",
							"pm.sendRequest(loginRequest, function (err, response) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } else {\r",
							"        const token = response.json().token;\r",
							"        pm.environment.set(\"token\", `${token}`);\r",
							"    }\r",
							"});\r",
							"\r",
							"const guestloginRequest = {\r",
							"    url: pm.collectionVariables.get('base_url') + \"/login-as-guest\",\r",
							"    method: 'POST',\r",
							"    header: 'Content-Type: application/json',\r",
							"    body: {\r",
							"        mode: 'application/json',\r",
							"        raw: JSON.stringify({\r",
							"            \"guestName\": \"guestName\",\r",
							"        })\r",
							"    }\r",
							"};\r",
							"pm.sendRequest(guestloginRequest, function (err, response) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } else {\r",
							"        const token = response.json().token;\r",
							"        pm.environment.set(\"guesttoken\", `${token}`);\r",
							"    }\r",
							"});\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Logs",
			"item": [
				{
					"name": "Logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"timestamp\": \"2024-05-27T20:31:44.725Z\",\r\n    \"level\": \"debug\",\r\n    \"message\": \"this is a test\"\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/logs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"logs"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"const loginRequest = {\r",
							"    url: pm.collectionVariables.get('base_url') + \"/login\",\r",
							"    method: 'POST',\r",
							"    header: 'Content-Type: application/json',\r",
							"    body: {\r",
							"        mode: 'application/json',\r",
							"        raw: JSON.stringify({\r",
							"            \"userName\": \"Frank\",\r",
							"            \"password\": \"FrankFrank1!\"\r",
							"        })\r",
							"    }\r",
							"};\r",
							"pm.sendRequest(loginRequest, function (err, response) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } else {\r",
							"        const token = response.json().token;\r",
							"        pm.environment.set(\"token\", `${token}`);\r",
							"    }\r",
							"});\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Seed",
			"item": [
				{
					"name": "Seed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"\r",
									"const DeleteHugo = {\r",
									"    url: pm.collectionVariables.get('base_url') + \"/DeleteUser\",\r",
									"    method: 'DELETE',\r",
									"    header: 'Content-Type: application/json',\r",
									"    body: {\r",
									"        mode: 'application/json',\r",
									"        raw: JSON.stringify(\"Hugo123\")\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(DeleteHugo, function (err) {\r",
									"    if (err) {\r",
									"        console.log(err);\r",
									"    } });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/seed-data",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"seed-data"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "GetUserIdFromUsername",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/GetUserIdFromUsername/Frank?username=Frank",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"GetUserIdFromUsername",
								"Frank"
							],
							"query": [
								{
									"key": "username",
									"value": "Frank"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "makeNewUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"Tester\",\r\n  \"email\": \"test@test.com\",\r\n  \"password\": \"TestTest1!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/makeNewUser",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"makeNewUser"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"Tester\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/DeleteUser",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"DeleteUser"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5008",
			"type": "string"
		}
	]
}