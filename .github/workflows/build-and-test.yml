#
name: Build and Test

on:
  push:
    branches:
      - main

jobs:
  build-client:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Restore .NET MAUI workload from cache
        uses: actions/cache@v2
        with:
          path: ~/.dotnet/workloads
          key: maui-workload-windows-${{ runner.os }}-${{ hashFiles('Client/Client.csproj') }}
          restore-keys: |
            maui-workload-windows-${{ runner.os }}-

      - name: Install .NET MAUI workload
        if: steps.maui-cache.outputs.cache-hit != 'true'
        run: dotnet workload install maui

      - name: Restore NuGet packages
        run: dotnet restore --no-cache

      - name: Build Client Solution
        run: |
          cd Client
          dotnet restore
          dotnet build -c Release

  build-server:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Build Server Solution
        run: |
          cd Server
          dotnet restore
          dotnet build -c Release

  test-client:
    runs-on: windows-latest
    needs: build-client

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Restore .NET MAUI workload from cache
        uses: actions/cache@v2
        with:
          path: ~/.dotnet/workloads
          key: maui-workload-windows-${{ runner.os }}-${{ hashFiles('Client/Client.csproj') }}
          restore-keys: |
            maui-workload-windows-${{ runner.os }}-

      - name: Test Client Solution
        run: |
          cd Client
          dotnet test --collect:"XPlat Code Coverage" --logger:"junit;MethodFormat=Class;FailureBodyFormat=Verbose"

  test-server:
    runs-on: ubuntu-latest
    needs: build-server

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Test Server Solution
        run: |
          cd Server
          dotnet test --collect:"XPlat Code Coverage" --logger:"junit;MethodFormat=Class;FailureBodyFormat=Verbose"
